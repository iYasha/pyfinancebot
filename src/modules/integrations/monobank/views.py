from aiogram import types

from config import bot, dp, settings
from modules.helps.enums import Command
from modules.integrations.enums import AvailableIntegration
from modules.integrations.monobank.enums import MonobankCallback
from modules.integrations.monobank.exceptions import MonobankException
from modules.integrations.monobank.services import MonobankIntegrationService, MonobankService
from sdk.decorators import SelectCompanyRequired, error_handler_decorator, transaction_decorator


async def send_account_list(chat_id: int, message_id: int) -> None:
    """
    Update message with account list
    """
    markup = types.InlineKeyboardMarkup(row_width=1)
    accounts = await MonobankIntegrationService.get_accounts(chat_id, settings.SELECTED_COMPANIES[chat_id])
    for account in accounts:
        button = types.InlineKeyboardButton(
            f"{'üü¢' if account.is_active else 'üî¥'} {account.name}",
            callback_data=MonobankCallback.change_account_status(account.id),
        )
        markup.row(button)
    markup.row(
        types.InlineKeyboardButton(
            'üö´ –û—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Monobank',
            callback_data=MonobankCallback.DISABLE,
        ),
    )
    markup.row(
        types.InlineKeyboardButton(
            'üîô –ù–∞–∑–∞–¥',
            callback_data=Command.INTEGRATIONS,
        ),
    )

    await bot.edit_message_text(
        text="–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: <b>Monobank</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Monobank –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å—á–µ—Ç –Ω–∞–∂–∞–≤ –Ω–∞ –Ω–µ–≥–æ.\n\n"
        "<i>–ï—Å–ª–∏ –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å—á–µ—Ç/–∫–∞—Ä—Ç—É –≤ Monobank –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏, "
        "–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –Ω–∏–º.</i>",
        chat_id=chat_id,
        message_id=message_id,
        parse_mode=settings.PARSE_MODE,
        reply_markup=markup,
    )


@dp.callback_query_handler(
    lambda c: c.data and c.data.startswith(AvailableIntegration.MONOBANK),
)
@SelectCompanyRequired
@error_handler_decorator
async def monobank_integration(callback_query: types.CallbackQuery) -> None:
    chat_id = callback_query.message.chat.id
    integration_key = await MonobankIntegrationService.get_integration_key(
        chat_id,
        settings.SELECTED_COMPANIES[chat_id],
    )
    if integration_key:
        await send_account_list(chat_id, callback_query.message.message_id)
    else:
        markup = types.InlineKeyboardMarkup(
            row_width=1,
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        'üîô –ù–∞–∑–∞–¥',
                        callback_data=Command.INTEGRATIONS,
                    ),
                ],
            ],
        )
        text = (
            '–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Monobank –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω, –Ω—É–∂–Ω–æ:\n'
            '1. –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://api.monobank.ua/\n'
            '2. –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è monobank\n'
            '3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Monobank\n'
            '4. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ\n'
            '5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /set_monobank_token TOKEN. –ì–¥–µ TOKEN - –≤–∞—à —Ç–æ–∫–µ–Ω'
        )
        await bot.edit_message_text(
            text=text,
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=settings.PARSE_MODE,
            reply_markup=markup,
        )
    await bot.answer_callback_query(callback_query.id)


@dp.message_handler(commands=[Command.SET_MONOBANK_TOKEN])
@SelectCompanyRequired
@error_handler_decorator
@transaction_decorator
async def set_monobank_token(message: types.Message) -> None:
    token = message.get_args().strip()
    chat_id = message.chat.id
    company_id = settings.SELECTED_COMPANIES[chat_id]
    error_message = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω.'
    if not token:
        await bot.send_message(
            message.chat.id,
            text=error_message,
        )
        return
    monobank_service = MonobankService(token)
    try:
        client_info = await monobank_service.get_client_info()
    except MonobankException:
        await bot.send_message(
            message.chat.id,
            text=error_message,
        )
        return
    webhook_secret = await MonobankIntegrationService.set_integration_key(chat_id, company_id, token)
    await MonobankIntegrationService.set_accounts(chat_id, company_id, client_info)
    await monobank_service.set_webhook(webhook_secret)
    text = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é {client_info.name}! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Monobank —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'
    await bot.send_message(message.chat.id, text=text)


@dp.callback_query_handler(
    lambda c: c.data and c.data.startswith(MonobankCallback.CHANGE_ACCOUNT_STATUS),
)
@SelectCompanyRequired
@error_handler_decorator
async def change_account_status(callback_query: types.CallbackQuery) -> None:
    account_id = callback_query.data.split(':')[-1]
    chat_id = callback_query.message.chat.id
    company_id = settings.SELECTED_COMPANIES[chat_id]
    await MonobankIntegrationService.change_account_status(chat_id, company_id, account_id)
    await send_account_list(chat_id, callback_query.message.message_id)
    await bot.answer_callback_query(callback_query.id)


@dp.callback_query_handler(
    lambda c: c.data == MonobankCallback.DISABLE,
)
@SelectCompanyRequired
@error_handler_decorator
@transaction_decorator
async def disable_monobank_integration(callback_query: types.CallbackQuery) -> None:
    chat_id = callback_query.message.chat.id
    company_id = settings.SELECTED_COMPANIES[chat_id]
    await MonobankIntegrationService.remove_integration(chat_id, company_id)
    await MonobankIntegrationService.delete_accounts(chat_id, company_id)
    await bot.send_message(
        chat_id,
        text='–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Monobank —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞.',
    )
    await bot.answer_callback_query(callback_query.id)
