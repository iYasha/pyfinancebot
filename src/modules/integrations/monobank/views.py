from aiogram import types

from config import bot, dp, settings
from modules.helps.enums import Command
from modules.integrations.enums import AvailableIntegration
from modules.integrations.monobank.exceptions import MonobankException
from modules.integrations.monobank.services import MonobankIntegrationService, MonobankService
from sdk.decorators import SelectCompanyRequired, error_handler_decorator


@dp.callback_query_handler(
    lambda c: c.data and c.data.startswith(AvailableIntegration.MONOBANK),
)
@error_handler_decorator
async def monobank_integration(callback_query: types.CallbackQuery) -> None:
    markup = types.InlineKeyboardMarkup(
        row_width=1,
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    'üîô –ù–∞–∑–∞–¥',
                    callback_data=Command.INTEGRATIONS,
                ),
            ],
        ],
    )
    chat_id = callback_query.message.chat.id
    if await MonobankIntegrationService.is_integrated(chat_id, settings.SELECTED_COMPANIES[chat_id]):
        # TODO: Add ability to turn off/on integration for specific accounts
        await bot.edit_message_text(
            text="–í—ã —É–∂–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∏ Monobank",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=settings.PARSE_MODE,
            reply_markup=markup,
        )
    else:
        text = (
            '–î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Monobank –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω, –Ω—É–∂–Ω–æ:\n'
            '1. –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ: https://api.monobank.ua/\n'
            '2. –û—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥ —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è monobank\n'
            '3. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—Ö–æ–¥ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Monobank\n'
            '4. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ\n'
            '5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /set_monobank_token TOKEN. –ì–¥–µ TOKEN - –≤–∞—à —Ç–æ–∫–µ–Ω'
        )
        await bot.edit_message_text(
            text=text,
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode=settings.PARSE_MODE,
            reply_markup=markup,
        )


@dp.message_handler(commands=[Command.SET_MONOBANK_TOKEN])
@SelectCompanyRequired
@error_handler_decorator
async def set_monobank_token(message: types.Message) -> None:
    token = message.get_args().strip()
    chat_id = message.chat.id
    company_id = settings.SELECTED_COMPANIES[chat_id]
    error_message = '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω.'
    if not token:
        await bot.send_message(
            message.chat.id,
            text=error_message,
        )
        return
    try:
        client_info = await MonobankService(token).get_client_info()
    except MonobankException:
        await bot.send_message(
            message.chat.id,
            text=error_message,
        )
        return
    await MonobankIntegrationService.set_integration_key(chat_id, company_id, token)
    text = f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é {client_info.name}! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Monobank —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'
    await bot.send_message(message.chat.id, text=text)
